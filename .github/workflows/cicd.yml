name: Django CI/CD

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]



jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: planora
          POSTGRES_USER: planora_user
          POSTGRES_PASSWORD: secretpass
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U planora_user"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set environment variables
      run: |
        echo "DB_NAME=planora" >> $GITHUB_ENV
        echo "DB_USER=planora_user" >> $GITHUB_ENV
        echo "DB_PASSWORD=secretpass" >> $GITHUB_ENV
        echo "DB_HOST=localhost" >> $GITHUB_ENV
        echo "DB_PORT=5432" >> $GITHUB_ENV

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -U planora_user; do sleep 1; done

    - name: Run migrations
      run: |
        cd planora
        python manage.py migrate

    - name: Run tests
      run: |
        cd planora
        python manage.py test

    - name: Static code analysis (Bandit)
      run: |
        pip install bandit
        bandit -r planora --exit-zero

    - name: Generate version file
      run: |
        echo "GIT_COMMIT=$(git rev-parse --short HEAD)" > version.txt

  docker:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.PAT_TOKEN }}

    - name: Build and push Docker image
      run: |
        IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/planora:latest
        docker build -t $IMAGE_NAME .
        docker push $IMAGE_NAME
