name: Django CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: NyaKawai
          POSTGRES_DB: planora
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5        

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create .env file
      run: |
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
        echo "DEBUG=${{ secrets.DEBUG }}" >> .env

        echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
        echo "DB_USER=${{ secrets.DB_USER }}" >> .env
        echo "DB_PASS=${{ secrets.DB_PASS }}" >> .env
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env

        echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
        echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> .env
        echo "EMAIL_USE_SSL=${{ secrets.EMAIL_USE_SSL }}" >> .env
        echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
        echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env

        echo "RECAPTCHA_PUBLIC=${{ secrets.RECAPTCHA_PUBLIC }}" >> .env
        echo "RECAPTCHA_PRIVATE=${{ secrets.RECAPTCHA_PRIVATE }}" >> .env

        echo "SOCIAL_AUTH_GOOGLE_OAUTH2_KEY=${{ secrets.SOCIAL_AUTH_GOOGLE_OAUTH2_KEY }}" >> .env
        echo "SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET=${{ secrets.SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET }}" >> .env

    - name: Apply migrations
      env:
        DB_NAME: planora
        DB_USER: postgres
        DB_PASSWORD: NyaKawai
        DB_HOST: localhost
        DB_PORT: 5432
      run: |
        cd planora
        python manage.py migrate
    
    - name: Run tests
      run: |
        cd planora 
        python manage.py test

    - name: Static code analysis (Bandit)
      run: |
        pip install bandit
        bandit -r planora --exit-zero

    - name: Generate version file
      run: |
        echo "GIT_COMMIT=$(git rev-parse --short HEAD)" > version.txt

